"""
Data structure for implementing actor network for DDPG algorithm
Algorithm and hyperparameter details can be found here:
    http://arxiv.org/pdf/1509.02971v2.pdf

Original author: Patrick Emami

Author: Bart Keulen

Further comments added by Mike Knee.
"""

import tensorflow as tf
import tflearn


class ActorNetwork(object):

    """
    Constructor for the ActorNetwork object.

    sess: tensorflow session, necessary to run all tensorflow operations.
    state_dim: dimensions of the state space of the environment this object
        will run in.
    action_dim: dimensions of the action space of the environment this object
        will run in.
    action_bound: upper limit of the action, assumed action can take any value
        between -action_bound and +action_bound.
    learning_rate: rate defining how quickly the agent will learn. 0 -> 1
    tau: rate defining how quickly the target network changes. 0 -> 1
    """
    def __init__(self, sess, state_dim, action_dim, action_bound, learning_rate, tau):
        self.sess = sess
        self.state_dim = state_dim
        self.action_dim = action_dim
        self.action_bound = action_bound
        self.learning_rate = learning_rate
        self.tau = tau

        # Actor network
        self.inputs, self.outputs, self.scaled_outputs = self.create_actor_network()
        self.net_params = tf.trainable_variables()

        # Target network
        self.target_inputs, self.target_outputs, self.target_scaled_outputs = self.create_actor_network()
        self.target_net_params = tf.trainable_variables()[len(self.net_params):]

        # Op for periodically updating target network with online network weights
        self.update_target_net_params = \
            [self.target_net_params[i].assign(tf.mul(self.net_params[i], self.tau) +
                                              tf.mul(self.target_net_params[i], 1. - self.tau))
             for i in range(len(self.target_net_params))]

        # Temporary placeholder action gradient
        self.action_gradients = tf.placeholder(tf.float32, [None, self.action_dim])

        # Combine dnetScaledOut/dnetParams with criticToActionGradient to get actorGradient
        self.actor_gradients = tf.gradients(self.scaled_outputs, self.net_params, -self.action_gradients)

        # Optimization Op
        self.optimize = tf.train.AdamOptimizer(self.learning_rate).\
            apply_gradients(zip(self.actor_gradients, self.net_params))

        self.num_trainable_vars = len(self.net_params) + len(self.target_net_params)

    """
    Build the neural network according to specifications from constructor.
    This function is to be used internally, and should not be called from
    outside the class.

    return: input and output tensorflow objects, plus outputs scaled to the
        action_bound.
    """
    def create_actor_network(self):
        inputs = tflearn.input_data(shape=[None, self.state_dim])
        net = tflearn.fully_connected(inputs, 400, activation='relu')
        net = tflearn.fully_connected(net, 300, activation='relu')
        # Final layer weight are initialized to Uniform[-3e-3, 3e-3]
        weight_init = tflearn.initializations.uniform(minval=-0.003, maxval=0.003)
        outputs = tflearn.fully_connected(net, self.action_dim, activation='tanh', weights_init=weight_init)
        scaled_outputs = tf.mul(outputs, self.action_bound) # Scale output to [-action_bound, action_bound]

        return inputs, outputs, scaled_outputs

    """
    Train method updates the network using inputs and action gradients,
    which should be generated by an accompanying CriticNetwork object.

    inputs: state observation information.
    action_gradients: action gradients generated by CriticNetwork.
    return: sess object information.
    """
    def train(self, inputs, action_gradients):
        return self.sess.run(self.optimize, feed_dict={
            self.inputs: inputs,
            self.action_gradients: action_gradients
        })

    """
    Predict method outputs appropriate action to take in a state parameterised
    by inputs.

    inputs: state observation information.
    return: sess object information.
    """
    def predict(self, inputs):
        return self.sess.run(self.scaled_outputs, feed_dict={
            self.inputs: inputs
        })

    """
    Same as above, using the target network.

    inputs: state observation information.
    return: sess object information.
    """
    def predict_target(self, inputs):
        return self.sess.run(self.target_scaled_outputs, feed_dict={
            self.target_inputs: inputs
        })

    """
    Update target network from on-line network.
    """
    def update_target_network(self):
        self.sess.run(self.update_target_net_params)

    """
    Getter for the num_trainable_vars.
    """
    def get_num_trainable_vars(self):
        return self.num_trainable_vars
